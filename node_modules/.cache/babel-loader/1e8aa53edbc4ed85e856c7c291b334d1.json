{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\Wolt\\\\Frontend-Task\\\\calculator\\\\src\\\\pages\\\\DeliveryFeeCalculator\\\\FeeCalculatorPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Textfield } from \"../../components/forms/TextField/TextField\";\nimport { CalculatorFooter } from \"../../components/layout/Footer/Footer\";\nimport { WoltSurcharge, Currency, Distance } from \"../../utils/Enums\";\nimport { isFloat } from \"../../utils/HelperMethods\";\nimport { calculateSurchargeOnCartValue, calculateSurchargeOnDistance, calculateSurchargeOnItems, calculateSurchargeOnRushHours, calculateTotalDeliveryCharges } from \"../../services/DeliveryFeeServices/DeliveryFeeService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  const [deliveryFee, setdeliveryFee] = useState(\"0\");\n  const [cartValue, setCartValue] = useState(0);\n  const [deliveryDistance, setDeliveryDistance] = useState(0);\n  const [amoutOfItems, setAmountOfItems] = useState(0);\n  const [orderTime, setOrderTime] = useState(\"\");\n  const [cartValueError, setcartValueError] = useState(\"\");\n  const [deliveryDistanceError, setDeliveryDistanceError] = useState(\"\");\n  const [amoutOfItemsError, setAmoutOfItemsError] = useState(\"\");\n  const [orderTimeError, setOrderTimeError] = useState(\"\");\n  const {\n    FreeDeliveryCartValue,\n    MinumumFreeCartValue,\n    MaximumSurchargeFreeDistanceCovered,\n    MaximumSurchargeFreeItems,\n    SurchargeOnExtraItem,\n    RushHoursDay,\n    RushHoursStartTime,\n    RushHoursEndTime,\n    SurchargeOnRushHours,\n    MaximumDeliveryFee\n  } = WoltSurcharge;\n\n  const calculatePrice = e => {\n    //check  if cart value is greater or equal to 100\n    if (cartValue >= FreeDeliveryCartValue) {\n      setdeliveryFee(\"0\");\n      return;\n    } //surcharge on cart vlaue\n\n\n    let surchargeOnCartValue = calculateSurchargeOnCartValue(MinumumFreeCartValue, cartValue); //surcharge on distance\n\n    let surchargeOnDistance = calculateSurchargeOnDistance(MaximumSurchargeFreeDistanceCovered, deliveryDistance); //surcharge on number of items\n\n    var surchargeOnItems = calculateSurchargeOnItems(MaximumSurchargeFreeItems, SurchargeOnExtraItem, amoutOfItems); //sum of surcharge to calculate distance\n\n    var deliverySum = surchargeOnCartValue + surchargeOnDistance + surchargeOnItems; //surcharge on rush hours\n\n    let surchargeOnRushHours = calculateSurchargeOnRushHours(RushHoursDay, RushHoursStartTime, RushHoursEndTime, SurchargeOnRushHours, orderTime, deliverySum); //total Delivery Fee\n\n    let totalDeliveryFee = calculateTotalDeliveryCharges(MaximumDeliveryFee, surchargeOnCartValue, surchargeOnDistance, surchargeOnItems, surchargeOnRushHours); //set delivery fee\n\n    setdeliveryFee(isFloat(totalDeliveryFee) ? totalDeliveryFee.toFixed(2) : totalDeliveryFee.toString());\n  };\n\n  const setValue = (e, setState) => {\n    setState(e.target.value);\n  };\n\n  const validate = () => {\n    let isValid = treu; //check value for cart value\n\n    if (cartValue == null || isNaN(cartValue)) {\n      setcartValueError(\"required\");\n    } else if (cartValue < 0) {\n      setcartValueError(\"value must be a positive number\");\n    } //check value for cart value\n\n\n    if (deliveryDistance == null || isNaN(deliveryDistance)) {\n      setDeliveryDistanceError(\"required\");\n    } else if (deliveryDistance < 0) {\n      setDeliveryDistanceError(\"value must be a positive number\");\n    } //check value for cart value\n\n\n    if (amoutOfItems == null || isNaN(amoutOfItems)) {\n      setAmoutOfItemsError(\"required\");\n    } else if (amoutOfItems < 0) {\n      setAmoutOfItemsError(\"value must be positive number\");\n    } //check value for cart value\n\n\n    if (orderTime == null) {\n      setOrderTimeError(\"required\");\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-sm-4 offset-sm-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Delivery Fee Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Textfield, {\n              className: \"form-control\",\n              type: \"number\",\n              step: \"0.1\",\n              min: \"0\",\n              value: cartValue,\n              onChange: event => setValue(event, setCartValue),\n              labelText: \"Cart Value\",\n              errorMessage: cartValueError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), Currency.Euro]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Textfield, {\n              className: \"form-control\",\n              type: \"number\",\n              min: \"0\",\n              value: deliveryDistance,\n              onChange: event => setValue(event, setDeliveryDistance),\n              labelText: \"Delivery Distance\",\n              errorMessage: amoutOfItemsError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), Distance.Meters]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-2\",\n            children: /*#__PURE__*/_jsxDEV(Textfield, {\n              className: \"form-control\",\n              type: \"number\",\n              min: \"0\",\n              value: amoutOfItems,\n              onChange: event => setValue(event, setAmountOfItems),\n              labelText: \"Amount of Items\",\n              errorMessage: amoutOfItemsError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-2\",\n            children: /*#__PURE__*/_jsxDEV(Textfield, {\n              className: \"form-control\",\n              type: \"datetime-local\",\n              value: orderTime,\n              onChange: event => setValue(event, setOrderTime),\n              labelText: \"Time\",\n              errorMessage: orderTimeError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CalculatorFooter, {\n          calculatedDeliveryFee: deliveryFee,\n          feeCurrency: Currency.Euro,\n          callback: calculatePrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Calculator, \"8y8PsLaVz8uUIK+cwDSXxmFmciE=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["C:/Muneer/Wolt/Frontend-Task/calculator/src/pages/DeliveryFeeCalculator/FeeCalculatorPage.tsx"],"names":["React","useState","Textfield","CalculatorFooter","WoltSurcharge","Currency","Distance","isFloat","calculateSurchargeOnCartValue","calculateSurchargeOnDistance","calculateSurchargeOnItems","calculateSurchargeOnRushHours","calculateTotalDeliveryCharges","Calculator","deliveryFee","setdeliveryFee","cartValue","setCartValue","deliveryDistance","setDeliveryDistance","amoutOfItems","setAmountOfItems","orderTime","setOrderTime","cartValueError","setcartValueError","deliveryDistanceError","setDeliveryDistanceError","amoutOfItemsError","setAmoutOfItemsError","orderTimeError","setOrderTimeError","FreeDeliveryCartValue","MinumumFreeCartValue","MaximumSurchargeFreeDistanceCovered","MaximumSurchargeFreeItems","SurchargeOnExtraItem","RushHoursDay","RushHoursStartTime","RushHoursEndTime","SurchargeOnRushHours","MaximumDeliveryFee","calculatePrice","e","surchargeOnCartValue","surchargeOnDistance","surchargeOnItems","deliverySum","surchargeOnRushHours","totalDeliveryFee","toFixed","toString","setValue","setState","target","value","validate","isValid","treu","isNaN","event","Euro","Meters"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Textfield } from \"../../components/forms/TextField/TextField\";\r\nimport { CalculatorFooter } from \"../../components/layout/Footer/Footer\";\r\n\r\nimport { WoltSurcharge, Currency, Distance } from \"../../utils/Enums\";\r\nimport { isFloat } from \"../../utils/HelperMethods\";\r\n\r\nimport {\r\n  calculateSurchargeOnCartValue,\r\n  calculateSurchargeOnDistance,\r\n  calculateSurchargeOnItems,\r\n  calculateSurchargeOnRushHours,\r\n  calculateTotalDeliveryCharges,\r\n} from \"../../services/DeliveryFeeServices/DeliveryFeeService\";\r\n\r\nconst Calculator: React.FC = () => {\r\n  const [deliveryFee, setdeliveryFee] = useState(\"0\");\r\n  const [cartValue, setCartValue] = useState(0);\r\n  const [deliveryDistance, setDeliveryDistance] = useState(0);\r\n  const [amoutOfItems, setAmountOfItems] = useState(0);\r\n  const [orderTime, setOrderTime] = useState(\"\");\r\n\r\n  const [cartValueError, setcartValueError] = useState(\"\");\r\n  const [deliveryDistanceError, setDeliveryDistanceError] = useState(\"\");\r\n  const [amoutOfItemsError, setAmoutOfItemsError] = useState(\"\");\r\n  const [orderTimeError, setOrderTimeError] = useState(\"\");\r\n\r\n  const {\r\n    FreeDeliveryCartValue,\r\n    MinumumFreeCartValue,\r\n    MaximumSurchargeFreeDistanceCovered,\r\n    MaximumSurchargeFreeItems,\r\n    SurchargeOnExtraItem,\r\n    RushHoursDay,\r\n    RushHoursStartTime,\r\n    RushHoursEndTime,\r\n    SurchargeOnRushHours,\r\n    MaximumDeliveryFee,\r\n  } = WoltSurcharge;\r\n\r\n  const calculatePrice = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    //check  if cart value is greater or equal to 100\r\n    if (cartValue >= FreeDeliveryCartValue) {\r\n      setdeliveryFee(\"0\");\r\n      return;\r\n    }\r\n\r\n    //surcharge on cart vlaue\r\n    let surchargeOnCartValue = calculateSurchargeOnCartValue(\r\n      MinumumFreeCartValue,\r\n      cartValue\r\n    );\r\n\r\n    //surcharge on distance\r\n    let surchargeOnDistance = calculateSurchargeOnDistance(\r\n      MaximumSurchargeFreeDistanceCovered,\r\n      deliveryDistance\r\n    );\r\n\r\n    //surcharge on number of items\r\n    var surchargeOnItems = calculateSurchargeOnItems(\r\n      MaximumSurchargeFreeItems,\r\n      SurchargeOnExtraItem,\r\n      amoutOfItems\r\n    );\r\n\r\n    //sum of surcharge to calculate distance\r\n    var deliverySum =\r\n      surchargeOnCartValue + surchargeOnDistance + surchargeOnItems;\r\n\r\n    //surcharge on rush hours\r\n    let surchargeOnRushHours = calculateSurchargeOnRushHours(\r\n      RushHoursDay,\r\n      RushHoursStartTime,\r\n      RushHoursEndTime,\r\n      SurchargeOnRushHours,\r\n      orderTime,\r\n      deliverySum\r\n    );\r\n\r\n    //total Delivery Fee\r\n    let totalDeliveryFee = calculateTotalDeliveryCharges(\r\n      MaximumDeliveryFee,\r\n      surchargeOnCartValue,\r\n      surchargeOnDistance,\r\n      surchargeOnItems,\r\n      surchargeOnRushHours\r\n    );\r\n\r\n    //set delivery fee\r\n    setdeliveryFee(\r\n      isFloat(totalDeliveryFee)\r\n        ? totalDeliveryFee.toFixed(2)\r\n        : totalDeliveryFee.toString()\r\n    );\r\n  };\r\n\r\n  const setValue = (e: any, setState: any) => {\r\n    setState(e.target.value);\r\n  };\r\n\r\n  const validate = () => {\r\n     let isValid = treu\r\n    //check value for cart value\r\n    if (cartValue == null || isNaN(cartValue)) {\r\n      setcartValueError(\"required\");\r\n    } else if (cartValue < 0) {\r\n      setcartValueError(\"value must be a positive number\");\r\n    }\r\n\r\n    //check value for cart value\r\n    if (deliveryDistance == null || isNaN(deliveryDistance)) {\r\n      setDeliveryDistanceError(\"required\");\r\n    } else if (deliveryDistance < 0) {\r\n      setDeliveryDistanceError(\"value must be a positive number\");\r\n    }\r\n\r\n    //check value for cart value\r\n    if (amoutOfItems == null || isNaN(amoutOfItems)) {\r\n      setAmoutOfItemsError(\"required\");\r\n    } else if (amoutOfItems < 0) {\r\n      setAmoutOfItemsError(\"value must be positive number\");\r\n    }\r\n\r\n    //check value for cart value\r\n    if (orderTime == null) {\r\n      setOrderTimeError(\"required\");\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-sm-4 offset-sm-4\">\r\n        <div className=\"card mt-5\">\r\n          <div className=\"card-header\">Delivery Fee Calculator</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"row mb-2\">\r\n              {/* <label className=\"col-sm-5 col-form-label\">Cart Value</label>\r\n              <div className=\"col-sm-5\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min=\"0\"\r\n                  value={cartValue}\r\n                  onChange={(event) => setValue(event, setCartValue)}\r\n                />\r\n              </div> */}\r\n              <Textfield\r\n                className=\"form-control\"\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                min=\"0\"\r\n                value={cartValue}\r\n                onChange={(event) => setValue(event, setCartValue)}\r\n                labelText=\"Cart Value\"\r\n                errorMessage={cartValueError}\r\n              />\r\n              {Currency.Euro}\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              {/* <label className=\"col-sm-5 col-form-label\">\r\n                Delivery Distance\r\n              </label>\r\n              <div className=\"col-sm-5\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={deliveryDistance}\r\n                  onChange={(event) => setValue(event, setDeliveryDistance)}\r\n                />\r\n              </div>\r\n              {Distance.Meters} */}\r\n              <Textfield\r\n                className=\"form-control\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                value={deliveryDistance}\r\n                onChange={(event) => setValue(event, setDeliveryDistance)}\r\n                labelText=\"Delivery Distance\"\r\n                errorMessage={amoutOfItemsError}\r\n              />\r\n              {Distance.Meters}\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              {/* <label className=\"col-sm-5 col-form-label\">Amount of Items</label>\r\n              <div className=\"col-sm-5\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={amoutOfItems}\r\n                  onChange={(event) => setValue(event, setAmountOfItems)}\r\n                />\r\n              </div> */}\r\n              <Textfield\r\n                className=\"form-control\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                value={amoutOfItems}\r\n                onChange={(event) => setValue(event, setAmountOfItems)}\r\n                labelText=\"Amount of Items\"\r\n                errorMessage={amoutOfItemsError}\r\n              />\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              {/* <label className=\"col-sm-4 col-form-label\">Time</label>\r\n              <div className=\"col-sm-7\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"datetime-local\"\r\n                  value={orderTime}\r\n                  onChange={(event) => setValue(event, setOrderTime)}\r\n                />\r\n              </div> */}\r\n              <Textfield\r\n                className=\"form-control\"\r\n                type=\"datetime-local\"\r\n                value={orderTime}\r\n                onChange={(event) => setValue(event, setOrderTime)}\r\n                labelText=\"Time\"\r\n                errorMessage={orderTimeError}\r\n              />\r\n            </div>\r\n          </div>\r\n          <CalculatorFooter\r\n            calculatedDeliveryFee={deliveryFee}\r\n            feeCurrency={Currency.Euro}\r\n            callback={calculatePrice}\r\n          />\r\n          {/* end of footer */}\r\n\r\n          {/* <div className=\"card-footer text-muted\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-6\">\r\n                <button className=\"btn btn-primary\" onClick={calculatePrice}>\r\n                  Calculate Delivery Price{\" \"}\r\n                </button>\r\n              </div>\r\n              <div className=\"col-lg-6\">\r\n                <p className=\"pt-5\">\r\n                  Delivery Price: {deliveryFee}\r\n                  {Currency.Euro}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n\r\n          {/* end of footer */}\r\n        </div>\r\n        {/* </Formik> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"]},"metadata":{},"sourceType":"module"}